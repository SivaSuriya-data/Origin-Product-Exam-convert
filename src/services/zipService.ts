import JSZip from 'jszip';
import { ProcessedFile } from '../types';

export class ZipService {
  async createZipFromFiles(files: ProcessedFile[], examCode: string): Promise<Blob> {
    const zip = new JSZip();
    
    // Create a folder for the exam
    const examFolder = zip.folder(examCode.toUpperCase());
    
    if (!examFolder) {
      throw new Error('Failed to create exam folder in ZIP');
    }

    // Add each formatted file to the ZIP
    for (const file of files) {
      if (file.formattedFile && file.status === 'completed') {
        const fileName = file.newName;
        examFolder.file(fileName, file.formattedFile);
      }
    }

    // Add a README file with instructions
    const readmeContent = this.generateReadmeContent(files, examCode);
    examFolder.file('README.txt', readmeContent);

    // Generate the ZIP file
    const zipBlob = await zip.generateAsync({
      type: 'blob',
      compression: 'DEFLATE',
      compressionOptions: {
        level: 6
      }
    });

    return zipBlob;
  }

  private generateReadmeContent(files: ProcessedFile[], examCode: string): string {
    const successfulFiles = files.filter(f => f.status === 'completed');
    const failedFiles = files.filter(f => f.status === 'error');

    let content = `${examCode.toUpperCase()} Document Conversion Results\n`;
    content += `Generated on: ${new Date().toLocaleString()}\n\n`;
    
    content += `SUCCESSFULLY CONVERTED FILES (${successfulFiles.length}):\n`;
    content += '='.repeat(50) + '\n';
    
    successfulFiles.forEach((file, index) => {
      content += `${index + 1}. ${file.newName}\n`;
      content += `   Original: ${file.originalName}\n`;
      content += `   Type: ${file.detectedType}\n\n`;
    });

    if (failedFiles.length > 0) {
      content += `\nFAILED CONVERSIONS (${failedFiles.length}):\n`;
      content += '='.repeat(50) + '\n';
      
      failedFiles.forEach((file, index) => {
        content += `${index + 1}. ${file.originalName}\n`;
        content += `   Error: ${file.error || 'Unknown error'}\n\n`;
      });
    }

    content += '\nIMPORTANT NOTES:\n';
    content += '- All files have been formatted according to ' + examCode.toUpperCase() + ' specifications\n';
    content += '- Please verify file sizes and formats before uploading to the official portal\n';
    content += '- Keep original files as backup\n';
    content += '- Generated by getConvertedExams.io\n';

    return content;
  }
}